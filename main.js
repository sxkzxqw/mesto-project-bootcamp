(()=>{"use strict";var __webpack_modules__={444:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"d\": () => (/* binding */ selectorsForValidation)\n});\n\n;// CONCATENATED MODULE: ./src/components/api.js\nvar config = {\n  url: 'https://mesto.nomoreparties.co/v1/wbf-cohort-5',\n  headers: {\n    'content-type': 'application/json',\n    'authorization': 'e428d967-ad54-4ed1-8f27-1e899a8fcfdd'\n  }\n};\nfunction promiseCall(res) {\n  return res.ok ? res.json() : res.json().then(function (data) {\n    return Promise.reject(data);\n  });\n}\nfunction getAllCards() {\n  return fetch(\"\".concat(config.url, \"/cards\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(promiseCall);\n}\nfunction getUserId() {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(promiseCall);\n}\nfunction getAllInfo() {\n  return Promise.all([getAllCards(), getUserId()]);\n}\nfunction addCardApi(body) {\n  return fetch(\"\".concat(config.url, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(promiseCall);\n}\nfunction deleteCard(id) {\n  return fetch(\"\".concat(config.url, \"/cards/\").concat(id), {\n    headers: config.headers,\n    method: 'DELETE'\n  }).then(promiseCall);\n}\nfunction getProfileInfo() {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(promiseCall);\n}\nfunction setUserPicture(body) {\n  return fetch(\"\".concat(config.url, \"/users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(promiseCall);\n}\nfunction setUserInfo(body) {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(promiseCall);\n}\nfunction updateLike(cardID, liked) {\n  return fetch(\"\".concat(config.url, \"/cards/likes/\").concat(cardID), {\n    method: liked ? 'DELETE' : 'PUT',\n    headers: config.headers\n  }).then(promiseCall);\n}\n;// CONCATENATED MODULE: ./src/components/validate.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction showErrorMessage(inputElement, errorElement, selectors) {\n  inputElement.classList.add(selectors.inputErrorSelector);\n  errorElement.textContent = inputElement.validationMessage;\n}\nfunction hideErrorMessage(inputElement, errorElement, selectors) {\n  inputElement.classList.remove(selectors.inputErrorSelector);\n  errorElement.textContent = '';\n}\nfunction buttonValidity(button, booleanTrue, selectors) {\n  if (booleanTrue) {\n    button.disabled = false;\n    button.classList.remove(selectors.buttonDisabledSelector);\n  } else {\n    button.disabled = 'disabled';\n    button.classList.add(selectors.buttonDisabledSelector);\n    button.classList.remove('buttons-hover');\n  }\n}\nfunction inputValidity(inputElement, elementForm, selectors) {\n  var isInputValid = inputElement.validity.valid;\n  var errorElement = elementForm.querySelector(\"#\".concat(inputElement.name, \"-error\"));\n  if (!isInputValid) {\n    showErrorMessage(inputElement, errorElement, selectors);\n  } else {\n    hideErrorMessage(inputElement, errorElement, selectors);\n  }\n}\nfunction setEventListeners(elementForm, selectors) {\n  var inputList = elementForm.querySelectorAll(selectors.inputSelector);\n  var submitButton = elementForm.querySelector(selectors.buttonSubmitSelector);\n  buttonValidity(submitButton, elementForm.checkValidity(), selectors);\n  elementForm.addEventListener('submit', function (e) {\n    e.preventDefault();\n  });\n  _toConsumableArray(inputList).forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      buttonValidity(submitButton, elementForm.checkValidity(), selectors);\n      inputValidity(inputElement, elementForm, selectors);\n    });\n  });\n}\nfunction validation(selectors) {\n  var allForms = document.querySelectorAll(selectors.formSelector);\n  _toConsumableArray(allForms).forEach(function (elementForm) {\n    setEventListeners(elementForm, selectors);\n  });\n}\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\n\n\n\nvar placeTemplate = document.querySelector('#place-template').content;\n\n//delete\nvar submitDeletePopup = document.querySelector('#popup-delete-submit');\nvar submitDeletePopupYesButton = submitDeletePopup.querySelector('.popup__button-delete_type_accept');\nvar submitDeletePopupNoButton = submitDeletePopup.querySelector('.popup__button-delete_type_deny');\nvar submitDeletePopupCloseButton = submitDeletePopup.querySelector('.popup__close-button');\n\n//add place function\nvar cardForDelete;\nvar cardForDeleteId;\n\n//add place function\nvar addPlace = function addPlace(el, userID) {\n  var card = placeTemplate.querySelector('.place').cloneNode(true);\n  var deleteCardButton = card.querySelector('.place__delete-button');\n  var likeButton = card.querySelector('.place__like-button');\n  var element = el;\n  //place create\n  card.querySelector('.place__image').src = el.link;\n  card.querySelector('.place__name').textContent = el.name;\n  card.querySelector('.place__image').alt = \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430 \".concat(el.name);\n  el.id = userID;\n  var likesCounter = card.querySelector('.place__count-likes');\n  checkLikeLocalView(el.likes, userID, likeButton, likesCounter);\n\n  //big img\n  card.querySelector('.place__image').addEventListener('click', function (evt) {\n    bigImg.src = el.link;\n    bigImgDescription.textContent = el.name;\n    bigImg.alt = \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430 \".concat(el.name);\n    openPopup(templateBigImg);\n  });\n\n  //like btn\n  likeButton.addEventListener('click', likeClick);\n\n  //del popup\n  function submitDeleting() {\n    openPopup(submitDeletePopup);\n    cardForDelete = card;\n    cardForDeleteId = el._id;\n  }\n  card.querySelector('.place__delete-button').addEventListener('click', function (evt) {\n    submitDeleting();\n  });\n  if (el.owner._id !== el.id) {\n    deleteCardButton.remove();\n  }\n  function likeClick() {\n    updateLike(el._id, isLiked(el.likes, userID)).then(function (newDataCard) {\n      el.likes = newDataCard.likes;\n      checkLikeLocalView(el.likes, userID, likeButton, likesCounter);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n  return card;\n};\nfunction deleteCardApi() {\n  buttonValidityForStatus(submitDeletePopupYesButton, true, selectorsForValidation);\n  deleteCard(cardForDeleteId).then(function () {\n    cardForDelete.remove();\n    modal_closePopup(submitDeletePopup);\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    buttonValidityForStatus(submitDeletePopupYesButton, false, selectorsForValidation, 'Да');\n  });\n}\nsubmitDeletePopupYesButton.addEventListener('click', deleteCardApi);\n;// CONCATENATED MODULE: ./src/components/modal.js\n\n\n\n\n\n//profile popup selectors\nvar profileEditButton = document.querySelector('.profile__edit-button');\nvar profilePopup = document.querySelector('.popup');\nvar profilePopupCloseButton = document.querySelector('.popup__close-button');\nvar userName = document.querySelector('.profile__name');\nvar userDescription = document.querySelector('.profile__description');\nvar profilePopupInputValueName = document.querySelector('.popup__form-text_type_name');\nvar profilePopupInputValueDescription = document.querySelector('.popup__form-text_type_description');\nvar profilePicture = document.querySelector('.profile__picture');\n\n//get profile info from api\ngetProfileInfo().then(function (data) {\n  userName.textContent = data.name;\n  userDescription.textContent = data.about;\n  profilePicture.src = data.avatar;\n  profilePopupInputValueName.value = userName.textContent;\n  profilePopupInputValueDescription.value = userDescription.textContent;\n}).catch(function (error) {\n  console.log(error);\n});\n\n//open and close popups\nvar openPopup = function openPopup(popup) {\n  popup.classList.add('popup_opened');\n  document.addEventListener('keydown', closePopupOnEscBtn);\n};\nvar openPopupWithForm = function openPopupWithForm(popup) {\n  openPopup(popup);\n  var currentButton = popup.querySelector('.popup__button');\n  buttonValidity(currentButton, false, selectorsForValidation);\n  var currentForm = popup.querySelector('.popup__form');\n  var currentInputs = currentForm.querySelectorAll('.popup__form-text');\n  currentInputs.forEach(function (input) {\n    var errorElement = currentForm.querySelector(\"#\".concat(input.name, \"-error\"));\n    hideErrorMessage(input, errorElement, selectorsForValidation);\n  });\n  currentForm.reset();\n};\nvar modal_closePopup = function closePopup(popup) {\n  popup.classList.remove('popup_opened');\n  document.removeEventListener('keydown', closePopupOnEscBtn);\n};\n\n//escape button close popup\nfunction closePopupOnEscBtn(event) {\n  if (event.key == 'Escape') {\n    var currentPopup = document.querySelector('.popup_opened');\n    modal_closePopup(currentPopup);\n  }\n}\n\n//overlay close popup\nfunction closePopupOnOverlayClick(evt) {\n  if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close-button')) {\n    var currentPopup = document.querySelector('.popup_opened');\n    if (!currentPopup) return;\n    modal_closePopup(currentPopup);\n  }\n}\n\n//second popup\nvar addCardPopup = document.querySelector('#popup-add-card');\nvar addCardPopupCloseButton = addCardPopup.querySelector('.popup__close-button');\nvar addCardPopupSaveButton = addCardPopup.querySelector('.popup__button');\nvar addButton = document.querySelector('.profile__add-button');\n\n//big img popup\nvar templateBigImg = document.querySelector('#popup-image');\ntemplateBigImg.setAttribute('style', 'background-color: rgba(0, 0, 0, 0.9)');\nvar bigImg = templateBigImg.querySelector('.popup__full-image');\nvar bigImgDescription = templateBigImg.querySelector('.popup__image-description');\nvar placeImg = document.querySelector('.place__image');\nvar closeBtnImg = templateBigImg.querySelector('.popup__close-button');\n\n//first popup form\nvar formElement = document.querySelector('.popup__form');\nvar profilePopupSaveButton = profilePopup.querySelector('.popup__button');\nfunction handleFormSubmit(evt) {\n  evt.preventDefault();\n  buttonValidityForStatus(profilePopupSaveButton, true, selectorsForValidation);\n  setUserInfo({\n    name: profilePopupInputValueName.value,\n    about: profilePopupInputValueDescription.value\n  }).then(function (userInfo) {\n    userName.textContent = profilePopupInputValueName.value;\n    userDescription.textContent = profilePopupInputValueDescription.value;\n    modal_closePopup(profilePopup);\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    buttonValidityForStatus(profilePopupSaveButton, false, selectorsForValidation, 'Сохранить');\n  });\n}\nformElement.addEventListener('submit', handleFormSubmit);\n\n//change profile image popup\nvar profileImage = document.querySelector('.profile__picture');\nvar profileImagePopup = document.querySelector('#popup-change-image-profile');\nvar profileImagePopupCloseButton = profileImagePopup.querySelector('.popup__close-button');\nvar profileImageInput = profileImagePopup.querySelector('.popup__form-text');\nvar profileImageFieldset = profileImagePopup.querySelector('.popup__fieldset');\nvar profileImageForm = profileImagePopup.querySelector('.popup__form');\nprofileImageFieldset.setAttribute('style', 'margin-bottom: 30px');\nvar profileImagePopupSaveButton = profileImagePopup.querySelector('.popup__button');\n\n//change profile image form \nfunction changeImageSubmit(evt) {\n  evt.preventDefault();\n  buttonValidityForStatus(profileImagePopupSaveButton, true, selectorsForValidation);\n  setUserPicture({\n    avatar: profileImageInput.value\n  }).then(function () {\n    profileImage.src = profileImageInput.value;\n    modal_closePopup(profileImagePopup);\n    evt.target.reset();\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    buttonValidityForStatus(profileImagePopupSaveButton, false, selectorsForValidation, 'Сохранить');\n  });\n}\nprofileImageForm.addEventListener('submit', changeImageSubmit);\n;// CONCATENATED MODULE: ./src/components/utils.js\n\nvar cardsList = document.querySelector('.places');\nvar formElementImage = addCardPopup.querySelector('.popup__form');\nvar popupPlaceHolderForNameOfPlace = addCardPopup.querySelector('.popup__form-text_type_name');\nvar popupPlaceHolderForLink = addCardPopup.querySelector('.popup__form-text_type_description');\n\nfunction buttonValidityForStatus(button, booleanTrue, selectors, text) {\n  if (booleanTrue) {\n    button.disabled = 'disabled';\n    button.classList.add(selectors.buttonDisabledSelector);\n    button.classList.remove('buttons-hover');\n    button.textContent = 'Сохранение...';\n  } else {\n    button.disabled = false;\n    button.classList.remove(selectors.buttonDisabledSelector);\n    button.textContent = text;\n  }\n}\nfunction isLiked(likes, userID) {\n  return likes.some(function (user) {\n    return user._id === userID;\n  });\n}\nfunction checkLikeLocalView(likes, userID, likeButton, likesCounter) {\n  if (isLiked(likes, userID)) {\n    likeButton.classList.add('place__like-button_type_active');\n  } else {\n    likeButton.classList.remove('place__like-button_type_active');\n  }\n  likesCounter.textContent = likes.length;\n}\nfunction utils_closePopupOnOverlayClick(evt) {\n  if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close-button')) {\n    var currentPopup = document.querySelector('.popup_opened');\n    closePopup(currentPopup);\n  }\n}\n;// CONCATENATED MODULE: ./src/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || src_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction src_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return src_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_arrayLikeToArray(o, minLen); }\nfunction src_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n//get user id\nvar userID = null;\n\n//add default cards\nfunction renderDefaultCards() {\n  getAllInfo().then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      dataCards = _ref2[0],\n      userData = _ref2[1];\n    userID = userData._id;\n    dataCards.forEach(function (el) {\n      var newPlace = addPlace(el, userID);\n      cardsList.append(newPlace);\n    });\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\nrenderDefaultCards();\n\n//second popup form\nvar addPlaceSubmit = function addPlaceSubmit(evt) {\n  evt.preventDefault();\n  buttonValidityForStatus(addCardPopupSaveButton, true, selectorsForValidation);\n  addCardApi({\n    name: popupPlaceHolderForNameOfPlace.value,\n    link: popupPlaceHolderForLink.value\n  }).then(function (newCardApi) {\n    var newPlace = addPlace(newCardApi, userID);\n    cardsList.prepend(newPlace);\n    modal_closePopup(addCardPopup);\n    evt.target.reset();\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    buttonValidityForStatus(addCardPopupSaveButton, false, selectorsForValidation, 'Создать');\n  });\n};\nformElementImage.addEventListener('submit', addPlaceSubmit);\n\n//validation configuration\nvar selectorsForValidation = {\n  formSelector: '.popup__form',\n  buttonSubmitSelector: '.popup__button',\n  inputSelector: '.popup__form-text',\n  inputErrorSelector: 'popup__form-text_type_invalid',\n  buttonDisabledSelector: 'popup__button_type_disabled'\n};\nvalidation(selectorsForValidation);\n\n//event listener for open user edit info popup\nprofileEditButton.addEventListener('click', function () {\n  openPopupWithForm(profilePopup);\n  profilePopupInputValueName.value = userName.textContent;\n  profilePopupInputValueDescription.value = userDescription.textContent;\n});\n\n//event listener for add card popup\naddButton.addEventListener('click', function () {\n  openPopupWithForm(addCardPopup);\n});\n\n//event listener for change profile image popup\nprofileImage.addEventListener('click', function () {\n  openPopupWithForm(profileImagePopup);\n});\n\n//adding opportunity to close popups by overflow click\nvar allPopups = document.querySelectorAll('.popup');\nallPopups.forEach(function (popup) {\n  popup.addEventListener('mousedown', closePopupOnOverlayClick);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDN0QsZ0JBQWdCLENBQUMsV0FBVyxFQUFFeUUsd0JBQXdCLENBQUM7QUFDakUsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1ib290Y2FtcC8uL3NyYy9jb21wb25lbnRzL2FwaS5qcz84NjgwIiwid2VicGFjazovL21lc3RvLXByb2plY3QtYm9vdGNhbXAvLi9zcmMvY29tcG9uZW50cy92YWxpZGF0ZS5qcz9lZGQ5Iiwid2VicGFjazovL21lc3RvLXByb2plY3QtYm9vdGNhbXAvLi9zcmMvY29tcG9uZW50cy9jYXJkLmpzPzI0YzMiLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1ib290Y2FtcC8uL3NyYy9jb21wb25lbnRzL21vZGFsLmpzPzZjZmEiLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1ib290Y2FtcC8uL3NyYy9jb21wb25lbnRzL3V0aWxzLmpzPzc1YmEiLCJ3ZWJwYWNrOi8vbWVzdG8tcHJvamVjdC1ib290Y2FtcC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbmZpZyA9IHtcclxuICAgIHVybDogJ2h0dHBzOi8vbWVzdG8ubm9tb3JlcGFydGllcy5jby92MS93YmYtY29ob3J0LTUnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ2F1dGhvcml6YXRpb24nOiAnZTQyOGQ5NjctYWQ1NC00ZWQxLThmMjctMWU4OTlhOGZjZmRkJ1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gcHJvbWlzZUNhbGwocmVzKSB7XHJcbiAgICByZXR1cm4gcmVzLm9rID8gcmVzLmpzb24oKSA6IHJlcy5qc29uKCkudGhlbigoZGF0YSkgPT4gIFByb21pc2UucmVqZWN0KGRhdGEpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbENhcmRzKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy51cmx9L2NhcmRzYCwge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnNcclxuICAgIH0pXHJcbiAgICAudGhlbihwcm9taXNlQ2FsbCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VySWQoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLnVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVyc1xyXG4gICAgfSlcclxuICAgIC50aGVuKHByb21pc2VDYWxsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbEluZm8oKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW2dldEFsbENhcmRzKCksIGdldFVzZXJJZCgpXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRDYXJkQXBpKGJvZHkpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHtjb25maWcudXJsfS9jYXJkc2AsIHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVycyxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxyXG4gICAgfSlcclxuICAgIC50aGVuKHByb21pc2VDYWxsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHtjb25maWcudXJsfS9jYXJkcy8ke2lkfWAsIHtcclxuICAgICAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVycyxcclxuICAgICAgICBtZXRob2Q6ICdERUxFVEUnXHJcbiAgICB9KVxyXG4gICAgLnRoZW4ocHJvbWlzZUNhbGwpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvZmlsZUluZm8oKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLnVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVyc1xyXG4gICAgfSlcclxuICAgIC50aGVuKHByb21pc2VDYWxsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFVzZXJQaWN0dXJlKGJvZHkpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHtjb25maWcudXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICB9KVxyXG4gICAgLnRoZW4ocHJvbWlzZUNhbGwpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0VXNlckluZm8oYm9keSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy51cmx9L3VzZXJzL21lYCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVycyxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KVxyXG4gICAgfSlcclxuICAgIC50aGVuKHByb21pc2VDYWxsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUxpa2UoY2FyZElELCBsaWtlZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy51cmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElEfWAsIHtcclxuICAgICAgICBtZXRob2Q6IGxpa2VkID8gJ0RFTEVURScgOiAnUFVUJyxcclxuICAgICAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVyc1xyXG4gICAgfSlcclxuICAgIC50aGVuKHByb21pc2VDYWxsKTtcclxufVxyXG4iLCJmdW5jdGlvbiBzaG93RXJyb3JNZXNzYWdlKGlucHV0RWxlbWVudCwgZXJyb3JFbGVtZW50LCBzZWxlY3RvcnMpIHtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHNlbGVjdG9ycy5pbnB1dEVycm9yU2VsZWN0b3IpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGlkZUVycm9yTWVzc2FnZShpbnB1dEVsZW1lbnQsIGVycm9yRWxlbWVudCwgc2VsZWN0b3JzKSB7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShzZWxlY3RvcnMuaW5wdXRFcnJvclNlbGVjdG9yKTtcclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9ICcnO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnV0dG9uVmFsaWRpdHkoYnV0dG9uLCBib29sZWFuVHJ1ZSwgc2VsZWN0b3JzKSB7XHJcbiAgICBpZiAoYm9vbGVhblRydWUpIHtcclxuICAgICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZShzZWxlY3RvcnMuYnV0dG9uRGlzYWJsZWRTZWxlY3Rvcik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9ICdkaXNhYmxlZCc7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoc2VsZWN0b3JzLmJ1dHRvbkRpc2FibGVkU2VsZWN0b3IpO1xyXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdidXR0b25zLWhvdmVyJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50LCBlbGVtZW50Rm9ybSwgc2VsZWN0b3JzKSB7XHJcbiAgICBjb25zdCBpc0lucHV0VmFsaWQgPSBpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSBlbGVtZW50Rm9ybS5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsZW1lbnQubmFtZX0tZXJyb3JgKTtcclxuXHJcbiAgICBpZiAoIWlzSW5wdXRWYWxpZCkge1xyXG4gICAgICAgIHNob3dFcnJvck1lc3NhZ2UoaW5wdXRFbGVtZW50LCBlcnJvckVsZW1lbnQsIHNlbGVjdG9ycyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhpZGVFcnJvck1lc3NhZ2UoaW5wdXRFbGVtZW50LCBlcnJvckVsZW1lbnQsIHNlbGVjdG9ycyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnRGb3JtLCBzZWxlY3RvcnMpIHtcclxuICAgIGNvbnN0IGlucHV0TGlzdCA9IGVsZW1lbnRGb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzLmlucHV0U2VsZWN0b3IpO1xyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZWxlbWVudEZvcm0ucXVlcnlTZWxlY3RvcihzZWxlY3RvcnMuYnV0dG9uU3VibWl0U2VsZWN0b3IpO1xyXG5cclxuICAgIGJ1dHRvblZhbGlkaXR5KHN1Ym1pdEJ1dHRvbiwgZWxlbWVudEZvcm0uY2hlY2tWYWxpZGl0eSgpLCBzZWxlY3RvcnMpO1xyXG5cclxuICAgIGVsZW1lbnRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgWy4uLmlucHV0TGlzdF0uZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICBidXR0b25WYWxpZGl0eShzdWJtaXRCdXR0b24sIGVsZW1lbnRGb3JtLmNoZWNrVmFsaWRpdHkoKSwgc2VsZWN0b3JzKTtcclxuICAgICAgICAgICAgaW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQsIGVsZW1lbnRGb3JtLCBzZWxlY3RvcnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRpb24oc2VsZWN0b3JzKSB7XHJcblxyXG4gICAgY29uc3QgYWxsRm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9ycy5mb3JtU2VsZWN0b3IpO1xyXG4gICAgWy4uLmFsbEZvcm1zXS5mb3JFYWNoKChlbGVtZW50Rm9ybSkgPT4ge1xyXG4gICAgICAgIHNldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnRGb3JtLCBzZWxlY3RvcnMpO1xyXG4gICAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgdGVtcGxhdGVCaWdJbWcsIFxyXG4gICAgICAgIGJpZ0ltZywgXHJcbiAgICAgICAgYmlnSW1nRGVzY3JpcHRpb259IGZyb20gXCIuL21vZGFsXCI7XHJcblxyXG5pbXBvcnQgeyBjbG9zZVBvcHVwLCBcclxuICAgICAgICBvcGVuUG9wdXAgfSBmcm9tIFwiLi9tb2RhbFwiO1xyXG5cclxuaW1wb3J0IHsgZGVsZXRlQ2FyZCwgXHJcbiAgICB1cGRhdGVMaWtlIH0gZnJvbSBcIi4vYXBpXCI7XHJcblxyXG5pbXBvcnQgeyBpc0xpa2VkLCBcclxuICAgIGNoZWNrTGlrZUxvY2FsVmlldyxcclxuYnV0dG9uVmFsaWRpdHlGb3JTdGF0dXMgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5cclxuaW1wb3J0IHsgc2VsZWN0b3JzRm9yVmFsaWRhdGlvbiB9IGZyb20gXCIuLi9pbmRleFwiO1xyXG5cclxuY29uc3QgcGxhY2VUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbGFjZS10ZW1wbGF0ZScpLmNvbnRlbnQ7XHJcblxyXG4vL2RlbGV0ZVxyXG5leHBvcnQgY29uc3Qgc3VibWl0RGVsZXRlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9wdXAtZGVsZXRlLXN1Ym1pdCcpO1xyXG5jb25zdCBzdWJtaXREZWxldGVQb3B1cFllc0J1dHRvbiA9IHN1Ym1pdERlbGV0ZVBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fYnV0dG9uLWRlbGV0ZV90eXBlX2FjY2VwdCcpO1xyXG5leHBvcnQgY29uc3Qgc3VibWl0RGVsZXRlUG9wdXBOb0J1dHRvbiA9IHN1Ym1pdERlbGV0ZVBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fYnV0dG9uLWRlbGV0ZV90eXBlX2RlbnknKTtcclxuZXhwb3J0IGNvbnN0IHN1Ym1pdERlbGV0ZVBvcHVwQ2xvc2VCdXR0b24gPSBzdWJtaXREZWxldGVQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlLWJ1dHRvbicpO1xyXG5cclxuLy9hZGQgcGxhY2UgZnVuY3Rpb25cclxubGV0IGNhcmRGb3JEZWxldGU7XHJcbmxldCBjYXJkRm9yRGVsZXRlSWQ7XHJcblxyXG4vL2FkZCBwbGFjZSBmdW5jdGlvblxyXG5leHBvcnQgY29uc3QgYWRkUGxhY2UgPSBmdW5jdGlvbiAoZWwsIHVzZXJJRCkge1xyXG4gICAgY29uc3QgY2FyZCA9IHBsYWNlVGVtcGxhdGUucXVlcnlTZWxlY3RvcignLnBsYWNlJykuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgY29uc3QgZGVsZXRlQ2FyZEJ1dHRvbiA9IGNhcmQucXVlcnlTZWxlY3RvcignLnBsYWNlX19kZWxldGUtYnV0dG9uJyk7XHJcbiAgICBjb25zdCBsaWtlQnV0dG9uID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcucGxhY2VfX2xpa2UtYnV0dG9uJyk7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZWw7XHJcbiAgICAvL3BsYWNlIGNyZWF0ZVxyXG4gICAgY2FyZC5xdWVyeVNlbGVjdG9yKCcucGxhY2VfX2ltYWdlJykuc3JjID0gZWwubGluaztcclxuICAgIGNhcmQucXVlcnlTZWxlY3RvcignLnBsYWNlX19uYW1lJykudGV4dENvbnRlbnQgPSBlbC5uYW1lO1xyXG4gICAgY2FyZC5xdWVyeVNlbGVjdG9yKCcucGxhY2VfX2ltYWdlJykuYWx0ID0gYNCa0LDRgNGC0LjQvdC60LAgJHtlbC5uYW1lfWA7XHJcbiAgICBlbC5pZCA9IHVzZXJJRDtcclxuICAgIGNvbnN0IGxpa2VzQ291bnRlciA9IGNhcmQucXVlcnlTZWxlY3RvcignLnBsYWNlX19jb3VudC1saWtlcycpO1xyXG4gICAgY2hlY2tMaWtlTG9jYWxWaWV3KGVsLmxpa2VzLCB1c2VySUQsIGxpa2VCdXR0b24sIGxpa2VzQ291bnRlcik7XHJcblxyXG5cclxuICAgIC8vYmlnIGltZ1xyXG4gICAgY2FyZC5xdWVyeVNlbGVjdG9yKCcucGxhY2VfX2ltYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgIGJpZ0ltZy5zcmMgPSBlbC5saW5rO1xyXG4gICAgICAgICAgICBiaWdJbWdEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IGVsLm5hbWU7XHJcbiAgICAgICAgICAgIGJpZ0ltZy5hbHQgPSBg0JrQsNGA0YLQuNC90LrQsCAke2VsLm5hbWV9YDtcclxuICAgICAgICAgICAgb3BlblBvcHVwKHRlbXBsYXRlQmlnSW1nKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAvL2xpa2UgYnRuXHJcbiAgICBsaWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbGlrZUNsaWNrKTtcclxuXHJcbiAgICAvL2RlbCBwb3B1cFxyXG4gICAgZnVuY3Rpb24gc3VibWl0RGVsZXRpbmcoKSB7XHJcbiAgICAgICAgb3BlblBvcHVwKHN1Ym1pdERlbGV0ZVBvcHVwKTtcclxuICAgICAgICBjYXJkRm9yRGVsZXRlID0gY2FyZDtcclxuICAgICAgICBjYXJkRm9yRGVsZXRlSWQgPSBlbC5faWQ7XHJcbiAgICB9XHJcbiAgICBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZV9fZGVsZXRlLWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIHN1Ym1pdERlbGV0aW5nKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoZWwub3duZXIuX2lkICE9PSBlbC5pZCkge1xyXG4gICAgICAgIGRlbGV0ZUNhcmRCdXR0b24ucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbGlrZUNsaWNrKCkge1xyXG4gICAgICAgIHVwZGF0ZUxpa2UoZWwuX2lkLCBpc0xpa2VkKGVsLmxpa2VzLCB1c2VySUQpKVxyXG4gICAgICAgICAgICAudGhlbihuZXdEYXRhQ2FyZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5saWtlcyA9IG5ld0RhdGFDYXJkLmxpa2VzO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tMaWtlTG9jYWxWaWV3KGVsLmxpa2VzLCB1c2VySUQsIGxpa2VCdXR0b24sIGxpa2VzQ291bnRlcik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2FyZDtcclxufTtcclxuXHJcblxyXG5mdW5jdGlvbiBkZWxldGVDYXJkQXBpKCkge1xyXG4gICAgYnV0dG9uVmFsaWRpdHlGb3JTdGF0dXMoc3VibWl0RGVsZXRlUG9wdXBZZXNCdXR0b24sIHRydWUsIHNlbGVjdG9yc0ZvclZhbGlkYXRpb24pO1xyXG4gICAgZGVsZXRlQ2FyZChjYXJkRm9yRGVsZXRlSWQpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBjYXJkRm9yRGVsZXRlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBjbG9zZVBvcHVwKHN1Ym1pdERlbGV0ZVBvcHVwKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICBidXR0b25WYWxpZGl0eUZvclN0YXR1cyhzdWJtaXREZWxldGVQb3B1cFllc0J1dHRvbiwgZmFsc2UsIHNlbGVjdG9yc0ZvclZhbGlkYXRpb24sICfQlNCwJyk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbnN1Ym1pdERlbGV0ZVBvcHVwWWVzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGVsZXRlQ2FyZEFwaSk7XHJcblxyXG4gXHJcblxyXG4iLCJpbXBvcnQgeyBzdWJtaXREZWxldGVQb3B1cE5vQnV0dG9uLCBcclxuICAgICAgICBzdWJtaXREZWxldGVQb3B1cENsb3NlQnV0dG9uLCBcclxuICAgICAgICBzdWJtaXREZWxldGVQb3B1cCB9IGZyb20gXCIuL2NhcmRcIjtcclxuXHJcbmltcG9ydCB7IGdldFByb2ZpbGVJbmZvLCBcclxuICAgICAgICBzZXRVc2VyUGljdHVyZSwgXHJcbiAgICAgICAgc2V0VXNlckluZm8gfSBmcm9tIFwiLi9hcGlcIjtcclxuXHJcbmltcG9ydCB7IGJ1dHRvblZhbGlkaXR5Rm9yU3RhdHVzIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmltcG9ydCB7IHNlbGVjdG9yc0ZvclZhbGlkYXRpb24gfSBmcm9tIFwiLi4vaW5kZXhcIjtcclxuXHJcbmltcG9ydCB7IGJ1dHRvblZhbGlkaXR5LCBoaWRlRXJyb3JNZXNzYWdlIH0gZnJvbSBcIi4vdmFsaWRhdGVcIjtcclxuLy9wcm9maWxlIHBvcHVwIHNlbGVjdG9yc1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fZWRpdC1idXR0b24nKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cCcpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVBvcHVwQ2xvc2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlLWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgdXNlck5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fbmFtZScpO1xyXG5leHBvcnQgY29uc3QgdXNlckRlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2Rlc2NyaXB0aW9uJyk7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlUG9wdXBJbnB1dFZhbHVlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybS10ZXh0X3R5cGVfbmFtZScpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVBvcHVwSW5wdXRWYWx1ZURlc2NyaXB0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtLXRleHRfdHlwZV9kZXNjcmlwdGlvbicpO1xyXG5jb25zdCBwcm9maWxlUGljdHVyZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19waWN0dXJlJyk7XHJcblxyXG5cclxuLy9nZXQgcHJvZmlsZSBpbmZvIGZyb20gYXBpXHJcbmdldFByb2ZpbGVJbmZvKClcclxuICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIHVzZXJOYW1lLnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xyXG4gICAgICAgIHVzZXJEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IGRhdGEuYWJvdXQ7XHJcbiAgICAgICAgcHJvZmlsZVBpY3R1cmUuc3JjID0gZGF0YS5hdmF0YXI7XHJcbiAgICAgICAgcHJvZmlsZVBvcHVwSW5wdXRWYWx1ZU5hbWUudmFsdWUgPSB1c2VyTmFtZS50ZXh0Q29udGVudDtcclxuICAgICAgICBwcm9maWxlUG9wdXBJbnB1dFZhbHVlRGVzY3JpcHRpb24udmFsdWUgPSB1c2VyRGVzY3JpcHRpb24udGV4dENvbnRlbnQ7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbi8vb3BlbiBhbmQgY2xvc2UgcG9wdXBzXHJcbmV4cG9ydCBjb25zdCBvcGVuUG9wdXAgPSBmdW5jdGlvbiAocG9wdXApIHtcclxuICAgIHBvcHVwLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGNsb3NlUG9wdXBPbkVzY0J0bik7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBvcGVuUG9wdXBXaXRoRm9ybSA9IGZ1bmN0aW9uIChwb3B1cCkge1xyXG4gICAgb3BlblBvcHVwKHBvcHVwKTtcclxuICAgIGNvbnN0IGN1cnJlbnRCdXR0b24gPSBwb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2J1dHRvbicpO1xyXG4gICAgYnV0dG9uVmFsaWRpdHkoY3VycmVudEJ1dHRvbiwgZmFsc2UsIHNlbGVjdG9yc0ZvclZhbGlkYXRpb24pO1xyXG4gICAgY29uc3QgY3VycmVudEZvcm0gPSBwb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKTtcclxuICAgIGNvbnN0IGN1cnJlbnRJbnB1dHMgPSBjdXJyZW50Rm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfX2Zvcm0tdGV4dCcpO1xyXG4gICAgY3VycmVudElucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IGN1cnJlbnRGb3JtLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0Lm5hbWV9LWVycm9yYCk7XHJcbiAgICAgICAgaGlkZUVycm9yTWVzc2FnZShpbnB1dCwgZXJyb3JFbGVtZW50LCBzZWxlY3RvcnNGb3JWYWxpZGF0aW9uKTtcclxuICAgIH0pO1xyXG4gICAgY3VycmVudEZvcm0ucmVzZXQoKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbG9zZVBvcHVwID0gZnVuY3Rpb24gKHBvcHVwKSB7XHJcbiAgICBwb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9vcGVuZWQnKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjbG9zZVBvcHVwT25Fc2NCdG4pO1xyXG59O1xyXG5cclxuLy9lc2NhcGUgYnV0dG9uIGNsb3NlIHBvcHVwXHJcbmZ1bmN0aW9uIGNsb3NlUG9wdXBPbkVzY0J0bihldmVudCkge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PSAnRXNjYXBlJykge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9vcGVuZWQnKTtcclxuICAgICAgICBjbG9zZVBvcHVwKGN1cnJlbnRQb3B1cCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vb3ZlcmxheSBjbG9zZSBwb3B1cFxyXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VQb3B1cE9uT3ZlcmxheUNsaWNrKGV2dCkge1xyXG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cCcpIHx8IGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9fY2xvc2UtYnV0dG9uJykpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50UG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfb3BlbmVkJyk7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50UG9wdXApIHJldHVybjtcclxuICAgICAgICBjbG9zZVBvcHVwKGN1cnJlbnRQb3B1cCk7IFxyXG4gICAgfVxyXG59XHJcblxyXG4vL3NlY29uZCBwb3B1cFxyXG5leHBvcnQgY29uc3QgYWRkQ2FyZFBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BvcHVwLWFkZC1jYXJkJyk7XHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkUG9wdXBDbG9zZUJ1dHRvbiA9IGFkZENhcmRQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlLWJ1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYWRkQ2FyZFBvcHVwU2F2ZUJ1dHRvbiA9IGFkZENhcmRQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2J1dHRvbicpO1xyXG5leHBvcnQgY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2FkZC1idXR0b24nKTtcclxuXHJcbi8vYmlnIGltZyBwb3B1cFxyXG5leHBvcnQgY29uc3QgdGVtcGxhdGVCaWdJbWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9wdXAtaW1hZ2UnKTtcclxudGVtcGxhdGVCaWdJbWcuc2V0QXR0cmlidXRlKCdzdHlsZScsICdiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOSknKTtcclxuZXhwb3J0IGNvbnN0IGJpZ0ltZyA9IHRlbXBsYXRlQmlnSW1nLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZnVsbC1pbWFnZScpO1xyXG5leHBvcnQgY29uc3QgYmlnSW1nRGVzY3JpcHRpb24gPSB0ZW1wbGF0ZUJpZ0ltZy5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlLWRlc2NyaXB0aW9uJyk7XHJcbmV4cG9ydCBjb25zdCBwbGFjZUltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZV9faW1hZ2UnKTtcclxuZXhwb3J0IGNvbnN0IGNsb3NlQnRuSW1nID0gdGVtcGxhdGVCaWdJbWcucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZS1idXR0b24nKTtcclxuXHJcbi8vZmlyc3QgcG9wdXAgZm9ybVxyXG5jb25zdCBmb3JtRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xyXG5cclxuY29uc3QgcHJvZmlsZVBvcHVwU2F2ZUJ1dHRvbiA9IHByb2ZpbGVQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2J1dHRvbicpO1xyXG5mdW5jdGlvbiBoYW5kbGVGb3JtU3VibWl0KGV2dCkge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBidXR0b25WYWxpZGl0eUZvclN0YXR1cyhwcm9maWxlUG9wdXBTYXZlQnV0dG9uLCB0cnVlLCBzZWxlY3RvcnNGb3JWYWxpZGF0aW9uKTtcclxuICAgIHNldFVzZXJJbmZvKHtuYW1lOiBwcm9maWxlUG9wdXBJbnB1dFZhbHVlTmFtZS52YWx1ZSwgYWJvdXQ6IHByb2ZpbGVQb3B1cElucHV0VmFsdWVEZXNjcmlwdGlvbi52YWx1ZX0pXHJcbiAgICAudGhlbigodXNlckluZm8pID0+IHtcclxuICAgICAgICB1c2VyTmFtZS50ZXh0Q29udGVudCA9IHByb2ZpbGVQb3B1cElucHV0VmFsdWVOYW1lLnZhbHVlO1xyXG4gICAgICAgIHVzZXJEZXNjcmlwdGlvbi50ZXh0Q29udGVudCA9IHByb2ZpbGVQb3B1cElucHV0VmFsdWVEZXNjcmlwdGlvbi52YWx1ZTtcclxuICAgICAgICBjbG9zZVBvcHVwKHByb2ZpbGVQb3B1cCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH0pXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgYnV0dG9uVmFsaWRpdHlGb3JTdGF0dXMocHJvZmlsZVBvcHVwU2F2ZUJ1dHRvbiwgZmFsc2UsIHNlbGVjdG9yc0ZvclZhbGlkYXRpb24sICfQodC+0YXRgNCw0L3QuNGC0YwnKTtcclxuICAgIH0pO1xyXG59XHJcbmZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGhhbmRsZUZvcm1TdWJtaXQpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vL2NoYW5nZSBwcm9maWxlIGltYWdlIHBvcHVwXHJcbmV4cG9ydCBjb25zdCBwcm9maWxlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fcGljdHVyZScpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUltYWdlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9wdXAtY2hhbmdlLWltYWdlLXByb2ZpbGUnKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVJbWFnZVBvcHVwQ2xvc2VCdXR0b24gPSBwcm9maWxlSW1hZ2VQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlLWJ1dHRvbicpO1xyXG5jb25zdCBwcm9maWxlSW1hZ2VJbnB1dCA9IHByb2ZpbGVJbWFnZVBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybS10ZXh0Jyk7XHJcbmNvbnN0IHByb2ZpbGVJbWFnZUZpZWxkc2V0ID0gcHJvZmlsZUltYWdlUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19maWVsZHNldCcpO1xyXG5jb25zdCBwcm9maWxlSW1hZ2VGb3JtID0gcHJvZmlsZUltYWdlUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XHJcbnByb2ZpbGVJbWFnZUZpZWxkc2V0LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnbWFyZ2luLWJvdHRvbTogMzBweCcpO1xyXG5jb25zdCBwcm9maWxlSW1hZ2VQb3B1cFNhdmVCdXR0b24gPSBwcm9maWxlSW1hZ2VQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2J1dHRvbicpO1xyXG5cclxuXHJcblxyXG4vL2NoYW5nZSBwcm9maWxlIGltYWdlIGZvcm0gXHJcbmZ1bmN0aW9uIGNoYW5nZUltYWdlU3VibWl0KGV2dCkge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBidXR0b25WYWxpZGl0eUZvclN0YXR1cyhwcm9maWxlSW1hZ2VQb3B1cFNhdmVCdXR0b24sIHRydWUsIHNlbGVjdG9yc0ZvclZhbGlkYXRpb24pO1xyXG4gICAgc2V0VXNlclBpY3R1cmUoeyBhdmF0YXI6IHByb2ZpbGVJbWFnZUlucHV0LnZhbHVlIH0pXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcHJvZmlsZUltYWdlLnNyYyA9IHByb2ZpbGVJbWFnZUlucHV0LnZhbHVlO1xyXG4gICAgICAgIGNsb3NlUG9wdXAocHJvZmlsZUltYWdlUG9wdXApO1xyXG4gICAgICAgIGV2dC50YXJnZXQucmVzZXQoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICBidXR0b25WYWxpZGl0eUZvclN0YXR1cyhwcm9maWxlSW1hZ2VQb3B1cFNhdmVCdXR0b24sIGZhbHNlLCBzZWxlY3RvcnNGb3JWYWxpZGF0aW9uLCAn0KHQvtGF0YDQsNC90LjRgtGMJyk7XHJcbiAgICB9KTtcclxufVxyXG5wcm9maWxlSW1hZ2VGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGNoYW5nZUltYWdlU3VibWl0KTsiLCJpbXBvcnQgeyBhZGRDYXJkUG9wdXAgfSBmcm9tIFwiLi9tb2RhbFwiO1xyXG5jb25zdCBjYXJkc0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxhY2VzJyk7XHJcbmNvbnN0IGZvcm1FbGVtZW50SW1hZ2UgPSBhZGRDYXJkUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XHJcbmNvbnN0IHBvcHVwUGxhY2VIb2xkZXJGb3JOYW1lT2ZQbGFjZSA9IGFkZENhcmRQb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0tdGV4dF90eXBlX25hbWUnKTtcclxuY29uc3QgcG9wdXBQbGFjZUhvbGRlckZvckxpbmsgPSBhZGRDYXJkUG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtLXRleHRfdHlwZV9kZXNjcmlwdGlvbicpO1xyXG5leHBvcnQgeyBjYXJkc0xpc3QsIGZvcm1FbGVtZW50SW1hZ2UsIHBvcHVwUGxhY2VIb2xkZXJGb3JOYW1lT2ZQbGFjZSwgcG9wdXBQbGFjZUhvbGRlckZvckxpbmt9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1dHRvblZhbGlkaXR5Rm9yU3RhdHVzKGJ1dHRvbiwgYm9vbGVhblRydWUsIHNlbGVjdG9ycywgdGV4dCkge1xyXG4gICAgaWYgKGJvb2xlYW5UcnVlKSB7XHJcbiAgICAgICAgYnV0dG9uLmRpc2FibGVkID0gJ2Rpc2FibGVkJztcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChzZWxlY3RvcnMuYnV0dG9uRGlzYWJsZWRTZWxlY3Rvcik7XHJcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2J1dHRvbnMtaG92ZXInKTtcclxuICAgICAgICBidXR0b24udGV4dENvbnRlbnQgPSAn0KHQvtGF0YDQsNC90LXQvdC40LUuLi4nO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZShzZWxlY3RvcnMuYnV0dG9uRGlzYWJsZWRTZWxlY3Rvcik7XHJcbiAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlrZWQobGlrZXMsIHVzZXJJRCkge1xyXG4gICAgcmV0dXJuIGxpa2VzLnNvbWUodXNlciA9PiB1c2VyLl9pZCA9PT0gdXNlcklEKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTGlrZUxvY2FsVmlldyhsaWtlcywgdXNlcklELCBsaWtlQnV0dG9uLCBsaWtlc0NvdW50ZXIpIHtcclxuICAgIGlmKGlzTGlrZWQobGlrZXMsIHVzZXJJRCkpIHtcclxuICAgICAgICBsaWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3BsYWNlX19saWtlLWJ1dHRvbl90eXBlX2FjdGl2ZScpO1xyXG4gICAgfSAgIGVsc2Uge1xyXG4gICAgICAgIGxpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgncGxhY2VfX2xpa2UtYnV0dG9uX3R5cGVfYWN0aXZlJyk7IFxyXG4gICAgfVxyXG4gICAgbGlrZXNDb3VudGVyLnRleHRDb250ZW50ID0gbGlrZXMubGVuZ3RoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VQb3B1cE9uT3ZlcmxheUNsaWNrKGV2dCkge1xyXG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cCcpIHx8IGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9fY2xvc2UtYnV0dG9uJykpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50UG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfb3BlbmVkJyk7XHJcbiAgICAgICAgY2xvc2VQb3B1cChjdXJyZW50UG9wdXApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICcuL2NvbXBvbmVudHMvYXBpJztcbmltcG9ydCBcIi4vcGFnZXMvaW5kZXguY3NzXCI7XG5pbXBvcnQgeyB2YWxpZGF0aW9uLCBcbiAgICAgICAgaGlkZUVycm9yTWVzc2FnZSB9IGZyb20gXCIuL2NvbXBvbmVudHMvdmFsaWRhdGVcIjtcblxuaW1wb3J0IHsgYnV0dG9uVmFsaWRpdHlGb3JTdGF0dXMsIFxuICAgICAgICBjYXJkc0xpc3QsXG4gICAgICAgIHBvcHVwUGxhY2VIb2xkZXJGb3JMaW5rLFxuICAgICAgICBwb3B1cFBsYWNlSG9sZGVyRm9yTmFtZU9mUGxhY2UsXG4gICAgICAgIGZvcm1FbGVtZW50SW1hZ2UgfSBmcm9tIFwiLi9jb21wb25lbnRzL3V0aWxzXCI7XG5cbmltcG9ydCB7IHByb2ZpbGVFZGl0QnV0dG9uLCBcbiAgICAgICAgYWRkQnV0dG9uLCBcbiAgICAgICAgcHJvZmlsZVBvcHVwLCBcbiAgICAgICAgYWRkQ2FyZFBvcHVwLCBcbiAgICAgICAgY2xvc2VQb3B1cE9uT3ZlcmxheUNsaWNrLCBcbiAgICAgICAgY2xvc2VQb3B1cCwgXG4gICAgICAgIHByb2ZpbGVJbWFnZSwgXG4gICAgICAgIHByb2ZpbGVJbWFnZVBvcHVwLCBcbiAgICAgICAgYWRkQ2FyZFBvcHVwU2F2ZUJ1dHRvbixcbiAgICAgICAgb3BlblBvcHVwV2l0aEZvcm0sXG4gICAgICAgIHByb2ZpbGVQb3B1cElucHV0VmFsdWVOYW1lLFxuICAgICAgICBwcm9maWxlUG9wdXBJbnB1dFZhbHVlRGVzY3JpcHRpb24sXG4gICAgICAgIHVzZXJOYW1lLFxuICAgICAgICB1c2VyRGVzY3JpcHRpb24gfSBmcm9tIFwiLi9jb21wb25lbnRzL21vZGFsXCI7XG5cbmltcG9ydCB7IGFkZFBsYWNlLCBzdWJtaXREZWxldGVQb3B1cCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY2FyZFwiO1xuXG5pbXBvcnQgeyBhZGRDYXJkQXBpLCBcbiAgICAgICAgZ2V0QWxsSW5mbyB9IGZyb20gJy4vY29tcG9uZW50cy9hcGknO1xuXG4vL2dldCB1c2VyIGlkXG5sZXQgdXNlcklEID0gbnVsbDtcblxuLy9hZGQgZGVmYXVsdCBjYXJkc1xuZnVuY3Rpb24gcmVuZGVyRGVmYXVsdENhcmRzKCkge1xuICAgIGdldEFsbEluZm8oKVxuICAgIC50aGVuKChbZGF0YUNhcmRzLCB1c2VyRGF0YV0pID0+IHtcbiAgICAgICAgdXNlcklEID0gdXNlckRhdGEuX2lkO1xuICAgICAgICBkYXRhQ2FyZHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1BsYWNlID0gYWRkUGxhY2UoZWwsIHVzZXJJRCk7XG4gICAgICAgICAgICBjYXJkc0xpc3QuYXBwZW5kKG5ld1BsYWNlKTtcbiAgICAgICAgfSk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufVxuXG5yZW5kZXJEZWZhdWx0Q2FyZHMoKTtcblxuLy9zZWNvbmQgcG9wdXAgZm9ybVxuY29uc3QgYWRkUGxhY2VTdWJtaXQgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgYnV0dG9uVmFsaWRpdHlGb3JTdGF0dXMoYWRkQ2FyZFBvcHVwU2F2ZUJ1dHRvbiwgdHJ1ZSwgc2VsZWN0b3JzRm9yVmFsaWRhdGlvbik7XG4gICAgYWRkQ2FyZEFwaSh7IG5hbWU6IHBvcHVwUGxhY2VIb2xkZXJGb3JOYW1lT2ZQbGFjZS52YWx1ZSwgbGluazogcG9wdXBQbGFjZUhvbGRlckZvckxpbmsudmFsdWV9KS50aGVuKChuZXdDYXJkQXBpKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1BsYWNlID0gYWRkUGxhY2UobmV3Q2FyZEFwaSwgdXNlcklEKTtcbiAgICAgICAgY2FyZHNMaXN0LnByZXBlbmQobmV3UGxhY2UpO1xuICAgICAgICBjbG9zZVBvcHVwKGFkZENhcmRQb3B1cCk7XG4gICAgICAgIGV2dC50YXJnZXQucmVzZXQoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH0pXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBidXR0b25WYWxpZGl0eUZvclN0YXR1cyhhZGRDYXJkUG9wdXBTYXZlQnV0dG9uLCBmYWxzZSwgc2VsZWN0b3JzRm9yVmFsaWRhdGlvbiwgJ9Ch0L7Qt9C00LDRgtGMJyk7XG4gICAgfSk7XG59O1xuXG5mb3JtRWxlbWVudEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGFkZFBsYWNlU3VibWl0KTtcblxuLy92YWxpZGF0aW9uIGNvbmZpZ3VyYXRpb25cbmV4cG9ydCBjb25zdCBzZWxlY3RvcnNGb3JWYWxpZGF0aW9uID0ge1xuICAgIGZvcm1TZWxlY3RvcjogJy5wb3B1cF9fZm9ybScsXG4gICAgYnV0dG9uU3VibWl0U2VsZWN0b3I6ICcucG9wdXBfX2J1dHRvbicsXG4gICAgaW5wdXRTZWxlY3RvcjogJy5wb3B1cF9fZm9ybS10ZXh0JyxcbiAgICBpbnB1dEVycm9yU2VsZWN0b3I6ICdwb3B1cF9fZm9ybS10ZXh0X3R5cGVfaW52YWxpZCcsXG4gICAgYnV0dG9uRGlzYWJsZWRTZWxlY3RvcjogJ3BvcHVwX19idXR0b25fdHlwZV9kaXNhYmxlZCdcbn1cblxudmFsaWRhdGlvbihzZWxlY3RvcnNGb3JWYWxpZGF0aW9uKTtcblxuXG5cbi8vZXZlbnQgbGlzdGVuZXIgZm9yIG9wZW4gdXNlciBlZGl0IGluZm8gcG9wdXBcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIG9wZW5Qb3B1cFdpdGhGb3JtKHByb2ZpbGVQb3B1cCk7XG4gICAgcHJvZmlsZVBvcHVwSW5wdXRWYWx1ZU5hbWUudmFsdWUgPSB1c2VyTmFtZS50ZXh0Q29udGVudDtcbiAgICBwcm9maWxlUG9wdXBJbnB1dFZhbHVlRGVzY3JpcHRpb24udmFsdWUgPSB1c2VyRGVzY3JpcHRpb24udGV4dENvbnRlbnQ7XG59KTtcblxuLy9ldmVudCBsaXN0ZW5lciBmb3IgYWRkIGNhcmQgcG9wdXBcbmFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBvcGVuUG9wdXBXaXRoRm9ybShhZGRDYXJkUG9wdXApO1xufSk7XG5cbi8vZXZlbnQgbGlzdGVuZXIgZm9yIGNoYW5nZSBwcm9maWxlIGltYWdlIHBvcHVwXG5wcm9maWxlSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgb3BlblBvcHVwV2l0aEZvcm0ocHJvZmlsZUltYWdlUG9wdXApO1xufSk7XG5cblxuXG5cbi8vYWRkaW5nIG9wcG9ydHVuaXR5IHRvIGNsb3NlIHBvcHVwcyBieSBvdmVyZmxvdyBjbGlja1xuY29uc3QgYWxsUG9wdXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwJyk7XG5hbGxQb3B1cHMuZm9yRWFjaCgocG9wdXApID0+IHtcbiAgICBwb3B1cC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBjbG9zZVBvcHVwT25PdmVybGF5Q2xpY2spO1xufSk7Il0sIm5hbWVzIjpbImNvbmZpZyIsInVybCIsImhlYWRlcnMiLCJwcm9taXNlQ2FsbCIsInJlcyIsIm9rIiwianNvbiIsInRoZW4iLCJkYXRhIiwiUHJvbWlzZSIsInJlamVjdCIsImdldEFsbENhcmRzIiwiZmV0Y2giLCJtZXRob2QiLCJnZXRVc2VySWQiLCJnZXRBbGxJbmZvIiwiYWxsIiwiYWRkQ2FyZEFwaSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVsZXRlQ2FyZCIsImlkIiwiZ2V0UHJvZmlsZUluZm8iLCJzZXRVc2VyUGljdHVyZSIsInNldFVzZXJJbmZvIiwidXBkYXRlTGlrZSIsImNhcmRJRCIsImxpa2VkIiwic2hvd0Vycm9yTWVzc2FnZSIsImlucHV0RWxlbWVudCIsImVycm9yRWxlbWVudCIsInNlbGVjdG9ycyIsImNsYXNzTGlzdCIsImFkZCIsImlucHV0RXJyb3JTZWxlY3RvciIsInRleHRDb250ZW50IiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJoaWRlRXJyb3JNZXNzYWdlIiwicmVtb3ZlIiwiYnV0dG9uVmFsaWRpdHkiLCJidXR0b24iLCJib29sZWFuVHJ1ZSIsImRpc2FibGVkIiwiYnV0dG9uRGlzYWJsZWRTZWxlY3RvciIsImlucHV0VmFsaWRpdHkiLCJlbGVtZW50Rm9ybSIsImlzSW5wdXRWYWxpZCIsInZhbGlkaXR5IiwidmFsaWQiLCJxdWVyeVNlbGVjdG9yIiwibmFtZSIsInNldEV2ZW50TGlzdGVuZXJzIiwiaW5wdXRMaXN0IiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b24iLCJidXR0b25TdWJtaXRTZWxlY3RvciIsImNoZWNrVmFsaWRpdHkiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwiZm9yRWFjaCIsInZhbGlkYXRpb24iLCJhbGxGb3JtcyIsImRvY3VtZW50IiwiZm9ybVNlbGVjdG9yIiwidGVtcGxhdGVCaWdJbWciLCJiaWdJbWciLCJiaWdJbWdEZXNjcmlwdGlvbiIsImNsb3NlUG9wdXAiLCJvcGVuUG9wdXAiLCJpc0xpa2VkIiwiY2hlY2tMaWtlTG9jYWxWaWV3IiwiYnV0dG9uVmFsaWRpdHlGb3JTdGF0dXMiLCJzZWxlY3RvcnNGb3JWYWxpZGF0aW9uIiwicGxhY2VUZW1wbGF0ZSIsImNvbnRlbnQiLCJzdWJtaXREZWxldGVQb3B1cCIsInN1Ym1pdERlbGV0ZVBvcHVwWWVzQnV0dG9uIiwic3VibWl0RGVsZXRlUG9wdXBOb0J1dHRvbiIsInN1Ym1pdERlbGV0ZVBvcHVwQ2xvc2VCdXR0b24iLCJjYXJkRm9yRGVsZXRlIiwiY2FyZEZvckRlbGV0ZUlkIiwiYWRkUGxhY2UiLCJlbCIsInVzZXJJRCIsImNhcmQiLCJjbG9uZU5vZGUiLCJkZWxldGVDYXJkQnV0dG9uIiwibGlrZUJ1dHRvbiIsImVsZW1lbnQiLCJzcmMiLCJsaW5rIiwiYWx0IiwibGlrZXNDb3VudGVyIiwibGlrZXMiLCJldnQiLCJsaWtlQ2xpY2siLCJzdWJtaXREZWxldGluZyIsIl9pZCIsIm93bmVyIiwibmV3RGF0YUNhcmQiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsImRlbGV0ZUNhcmRBcGkiLCJmaW5hbGx5IiwicHJvZmlsZUVkaXRCdXR0b24iLCJwcm9maWxlUG9wdXAiLCJwcm9maWxlUG9wdXBDbG9zZUJ1dHRvbiIsInVzZXJOYW1lIiwidXNlckRlc2NyaXB0aW9uIiwicHJvZmlsZVBvcHVwSW5wdXRWYWx1ZU5hbWUiLCJwcm9maWxlUG9wdXBJbnB1dFZhbHVlRGVzY3JpcHRpb24iLCJwcm9maWxlUGljdHVyZSIsImFib3V0IiwiYXZhdGFyIiwidmFsdWUiLCJwb3B1cCIsImNsb3NlUG9wdXBPbkVzY0J0biIsIm9wZW5Qb3B1cFdpdGhGb3JtIiwiY3VycmVudEJ1dHRvbiIsImN1cnJlbnRGb3JtIiwiY3VycmVudElucHV0cyIsImlucHV0IiwicmVzZXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJrZXkiLCJjdXJyZW50UG9wdXAiLCJjbG9zZVBvcHVwT25PdmVybGF5Q2xpY2siLCJ0YXJnZXQiLCJjb250YWlucyIsImFkZENhcmRQb3B1cCIsImFkZENhcmRQb3B1cENsb3NlQnV0dG9uIiwiYWRkQ2FyZFBvcHVwU2F2ZUJ1dHRvbiIsImFkZEJ1dHRvbiIsInNldEF0dHJpYnV0ZSIsInBsYWNlSW1nIiwiY2xvc2VCdG5JbWciLCJmb3JtRWxlbWVudCIsInByb2ZpbGVQb3B1cFNhdmVCdXR0b24iLCJoYW5kbGVGb3JtU3VibWl0IiwidXNlckluZm8iLCJwcm9maWxlSW1hZ2UiLCJwcm9maWxlSW1hZ2VQb3B1cCIsInByb2ZpbGVJbWFnZVBvcHVwQ2xvc2VCdXR0b24iLCJwcm9maWxlSW1hZ2VJbnB1dCIsInByb2ZpbGVJbWFnZUZpZWxkc2V0IiwicHJvZmlsZUltYWdlRm9ybSIsInByb2ZpbGVJbWFnZVBvcHVwU2F2ZUJ1dHRvbiIsImNoYW5nZUltYWdlU3VibWl0IiwiY2FyZHNMaXN0IiwiZm9ybUVsZW1lbnRJbWFnZSIsInBvcHVwUGxhY2VIb2xkZXJGb3JOYW1lT2ZQbGFjZSIsInBvcHVwUGxhY2VIb2xkZXJGb3JMaW5rIiwidGV4dCIsInNvbWUiLCJ1c2VyIiwibGVuZ3RoIiwicmVuZGVyRGVmYXVsdENhcmRzIiwiZGF0YUNhcmRzIiwidXNlckRhdGEiLCJuZXdQbGFjZSIsImFwcGVuZCIsImVyciIsImFkZFBsYWNlU3VibWl0IiwibmV3Q2FyZEFwaSIsInByZXBlbmQiLCJhbGxQb3B1cHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///444\n")}},__webpack_require__={d:(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F)},__webpack_exports__={};__webpack_modules__[444](0,__webpack_exports__,__webpack_require__)})();