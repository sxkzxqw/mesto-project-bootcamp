(()=>{"use strict";var __webpack_modules__={444:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"d\": () => (/* binding */ selectorsForValidation)\n});\n\n;// CONCATENATED MODULE: ./src/components/api.js\nvar config = {\n  url: 'https://mesto.nomoreparties.co/v1/wbf-cohort-5',\n  headers: {\n    'content-type': 'application/json',\n    'authorization': 'e428d967-ad54-4ed1-8f27-1e899a8fcfdd'\n  }\n};\nfunction promiseCall(res) {\n  return res.ok ? res.json() : res.json().then(function (data) {\n    return Promise.reject(data);\n  });\n}\nfunction getAllCards() {\n  return fetch(\"\".concat(config.url, \"/cards\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(promiseCall);\n}\nfunction getUserId() {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(promiseCall);\n}\nfunction getAllInfo() {\n  return Promise.all([getAllCards(), getUserId()]);\n}\nfunction addCardApi(body) {\n  return fetch(\"\".concat(config.url, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(promiseCall);\n}\nfunction deleteCard(id) {\n  return fetch(\"\".concat(config.url, \"/cards/\").concat(id), {\n    headers: config.headers,\n    method: 'DELETE'\n  }).then(promiseCall);\n}\nfunction getProfileInfo() {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(promiseCall);\n}\nfunction setUserPicture(body) {\n  return fetch(\"\".concat(config.url, \"/users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(promiseCall);\n}\nfunction setUserInfo(body) {\n  return fetch(\"\".concat(config.url, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify(body)\n  }).then(promiseCall);\n}\nfunction updateLike(cardID, liked) {\n  return fetch(\"\".concat(config.url, \"/cards/likes/\").concat(cardID), {\n    method: liked ? 'DELETE' : 'PUT',\n    headers: config.headers\n  }).then(promiseCall);\n}\n;// CONCATENATED MODULE: ./src/components/validate.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction showErrorMessage(inputElement, errorElement, selectors) {\n  inputElement.classList.add(selectors.inputErrorSelector);\n  errorElement.textContent = inputElement.validationMessage;\n}\nfunction hideErrorMessage(inputElement, errorElement, selectors) {\n  inputElement.classList.remove(selectors.inputErrorSelector);\n  errorElement.textContent = inputElement.validationMessage;\n}\nfunction buttonValidity(button, booleanTrue, selectors) {\n  if (booleanTrue) {\n    button.disabled = false;\n    button.classList.remove(selectors.buttonDisabledSelector);\n  } else {\n    button.disabled = 'disabled';\n    button.classList.add(selectors.buttonDisabledSelector);\n    button.classList.remove('buttons-hover');\n  }\n}\nfunction inputValidity(inputElement, elementForm, selectors) {\n  var isInputValid = inputElement.validity.valid;\n  var errorElement = elementForm.querySelector(\"#\".concat(inputElement.name, \"-error\"));\n  if (!isInputValid) {\n    showErrorMessage(inputElement, errorElement, selectors);\n  } else {\n    hideErrorMessage(inputElement, errorElement, selectors);\n  }\n}\nfunction setEventListeners(elementForm, selectors) {\n  var inputList = elementForm.querySelectorAll(selectors.inputSelector);\n  var submitButton = elementForm.querySelector(selectors.buttonSubmitSelector);\n  buttonValidity(submitButton, elementForm.checkValidity(), selectors);\n  elementForm.addEventListener('submit', function (e) {\n    e.preventDefault();\n  });\n  _toConsumableArray(inputList).forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      buttonValidity(submitButton, elementForm.checkValidity(), selectors);\n      inputValidity(inputElement, elementForm, selectors);\n    });\n  });\n}\nfunction validation(selectors) {\n  var allForms = document.querySelectorAll(selectors.formSelector);\n  _toConsumableArray(allForms).forEach(function (elementForm) {\n    setEventListeners(elementForm, selectors);\n  });\n}\n;// CONCATENATED MODULE: ./src/components/card.js\n\n\n\n\n\nvar placeTemplate = document.querySelector('#place-template').content;\n\n//delete\nvar submitDeletePopup = document.querySelector('#popup-delete-submit');\nvar submitDeletePopupYesButton = submitDeletePopup.querySelector('.popup__button-delete_type_accept');\nvar submitDeletePopupNoButton = submitDeletePopup.querySelector('.popup__button-delete_type_deny');\nvar submitDeletePopupCloseButton = submitDeletePopup.querySelector('.popup__close-button');\n\n//add place function\nvar addPlace = function addPlace(el, userID) {\n  var card = placeTemplate.querySelector('.place').cloneNode(true);\n  var deleteCardButton = card.querySelector('.place__delete-button');\n  var likeButton = card.querySelector('.place__like-button');\n  var element = el;\n  //place create\n  card.querySelector('.place__image').src = el.link;\n  card.querySelector('.place__name').textContent = el.name;\n  card.querySelector('.place__image').alt = \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430 \".concat(el.name);\n  el.id = userID;\n  var likesCounter = card.querySelector('.place__count-likes');\n  checkLikeLocalView(el.likes, userID, likeButton, likesCounter);\n\n  //big img\n  card.querySelector('.place__image').addEventListener('click', function (evt) {\n    if (evt.target.closest('.place')) {\n      bigImg.src = el.link;\n      bigImgDescription.textContent = el.name;\n      bigImg.alt = \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430 \".concat(el.name);\n      openPopup(templateBigImg);\n    }\n  });\n\n  //like btn\n  likeButton.addEventListener('click', likeClick);\n\n  //del popup\n  function submitDeleting(evt, element) {\n    openPopup(submitDeletePopup);\n    submitDeletePopupClick(evt, element);\n  }\n  card.querySelector('.place__delete-button').addEventListener('click', function (evt) {\n    submitDeleting(evt, element);\n  });\n  function deleteCardApi() {\n    buttonValidityForStatus(submitDeletePopupYesButton, true, selectorsForValidation);\n    deleteCard(el._id).then(function () {\n      card.remove();\n      modal_closePopup(submitDeletePopup);\n      submitDeletePopupYesButton.removeEventListener('click', deleteCardApi);\n    }).catch(function (error) {\n      console.log(error);\n    }).finally(function () {\n      buttonValidityForStatus(submitDeletePopupYesButton, false, selectorsForValidation, 'Да');\n    });\n  }\n  function submitDeletePopupClick() {\n    submitDeletePopupYesButton.addEventListener('click', deleteCardApi);\n  }\n\n  //close delete popup\n  submitDeletePopupNoButton.addEventListener('click', function () {\n    modal_closePopup(submitDeletePopup);\n    submitDeletePopupYesButton.removeEventListener('click', deleteCardApi);\n  });\n  submitDeletePopupCloseButton.addEventListener('click', function () {\n    modal_closePopup(submitDeletePopup);\n    submitDeletePopupYesButton.removeEventListener('click', deleteCardApi);\n  });\n  function closeSubmitDeletePopupOnOverlayClick(evt) {\n    if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close-button')) {\n      var currentPopup = document.querySelector('.popup_opened');\n      submitDeletePopupYesButton.removeEventListener('click', deleteCardApi);\n      modal_closePopup(currentPopup);\n    }\n  }\n  submitDeletePopup.addEventListener('mousedown', closeSubmitDeletePopupOnOverlayClick);\n  // ------------------------------------------------------------------------------------------------\n  // мое решение по поводу бага с закрытием и открытием попапа подтверждающего удаления, не сомневаюсь\n  // что оно неправильное, поэтому было бы очень круто если бы вы разъяснили что не так и каким путем \n  // это можно улучшить.\n  // ------------------------------------------------------------------------------------------------\n  /////////////////////////////////////////////\n  if (el.owner._id !== el.id) {\n    deleteCardButton.remove();\n  }\n  function likeClick() {\n    updateLike(el._id, isLiked(el.likes, userID)).then(function (newDataCard) {\n      el.likes = newDataCard.likes;\n      checkLikeLocalView(el.likes, userID, likeButton, likesCounter);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n  return card;\n};\n;// CONCATENATED MODULE: ./src/components/modal.js\n\n\n\n\n\n//profile popup selectors\nvar profileEditButton = document.querySelector('.profile__edit-button');\nvar profilePopup = document.querySelector('.popup');\nvar profilePopupCloseButton = document.querySelector('.popup__close-button');\nvar userName = document.querySelector('.profile__name');\nvar userDescription = document.querySelector('.profile__description');\nvar profilePopupInputValueName = document.querySelector('.popup__form-text_type_name');\nvar profilePopupInputValueDescription = document.querySelector('.popup__form-text_type_description');\nvar profilePicture = document.querySelector('.profile__picture');\n\n//get profile info from api\ngetProfileInfo().then(function (data) {\n  userName.textContent = data.name;\n  userDescription.textContent = data.about;\n  profilePicture.src = data.avatar;\n  profilePopupInputValueName.value = userName.textContent;\n  profilePopupInputValueDescription.value = userDescription.textContent;\n}).catch(function (error) {\n  console.log(error);\n});\n\n//open and close popups\nvar openPopup = function openPopup(popup) {\n  popup.classList.add('popup_opened');\n  document.addEventListener('keydown', closePopupOnEscBtn);\n};\nvar openPopupWithForm = function openPopupWithForm(popup) {\n  popup.classList.add('popup_opened');\n  document.addEventListener('keydown', closePopupOnEscBtn);\n  var currentButton = popup.querySelector('.popup__button');\n  buttonValidity(currentButton, false, selectorsForValidation);\n};\nvar modal_closePopup = function closePopup(popup) {\n  popup.classList.remove('popup_opened');\n  document.removeEventListener('keydown', closePopupOnEscBtn);\n};\n\n//escape button close popup\nfunction closePopupOnEscBtn(event) {\n  if (event.key == 'Escape') {\n    var currentPopup = document.querySelector('.popup_opened');\n    modal_closePopup(currentPopup);\n  }\n}\n\n//overlay close popup\nfunction closePopupOnOverlayClick(evt) {\n  if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close-button')) {\n    // ---------------------------------------------------------------------------------------------------------\n    // В вашем решении второе условие функции теряет свою работоспособность, ниже описал почему.\n    // (клик на закрытие попапа перестает работать)\n    //\n    // В данной функции currentpopup нужен для того, чтобы отображать сам попап и закрывать его по\n    // клику на закрывающую кнопку(в случае если этой константы не будет, то в evt.target приходит только\n    // кнопка, и выходит два возможных вариант решения, либо делать переменную current popup, либо\n    // описывать второе условоие в котором будет только evt.target.classList.contains('popup__close-button')\n    // и в случае выбора второго варианта придется делать все это через метод closest, как по мне проще читать\n    // код в котором есть перменная с текущим попапом, нежели делать два условия)\n    //\n    // По поводу ошибки при двойном щелчке было бы интересно послушать как можно это исправить.\n    // ---------------------------------------------------------------------------------------------------------\n    var currentPopup = document.querySelector('.popup_opened');\n    modal_closePopup(currentPopup);\n  }\n}\n\n//second popup\nvar addCardPopup = document.querySelector('#popup-add-card');\nvar addCardPopupCloseButton = addCardPopup.querySelector('.popup__close-button');\nvar addCardPopupSaveButton = addCardPopup.querySelector('.popup__button');\nvar addButton = document.querySelector('.profile__add-button');\n\n//big img popup\nvar templateBigImg = document.querySelector('#popup-image');\ntemplateBigImg.setAttribute('style', 'background-color: rgba(0, 0, 0, 0.9)');\nvar bigImg = templateBigImg.querySelector('.popup__full-image');\nvar bigImgDescription = templateBigImg.querySelector('.popup__image-description');\nvar placeImg = document.querySelector('.place__image');\nvar closeBtnImg = templateBigImg.querySelector('.popup__close-button');\n\n//first popup form\nvar formElement = document.querySelector('.popup__form');\nvar profilePopupSaveButton = profilePopup.querySelector('.popup__button');\nfunction handleFormSubmit(evt) {\n  evt.preventDefault();\n  buttonValidityForStatus(profilePopupSaveButton, true, selectorsForValidation);\n  setUserInfo({\n    name: profilePopupInputValueName.value,\n    about: profilePopupInputValueDescription.value\n  }).then(function (userInfo) {\n    userName.textContent = profilePopupInputValueName.value;\n    userDescription.textContent = profilePopupInputValueDescription.value;\n    modal_closePopup(profilePopup);\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    buttonValidityForStatus(profilePopupSaveButton, false, selectorsForValidation, 'Сохранить');\n  });\n}\nformElement.addEventListener('submit', handleFormSubmit);\n\n//change profile image popup\nvar profileImage = document.querySelector('.profile__picture');\nvar profileImagePopup = document.querySelector('#popup-change-image-profile');\nvar profileImagePopupCloseButton = profileImagePopup.querySelector('.popup__close-button');\nvar profileImageInput = profileImagePopup.querySelector('.popup__form-text');\nvar profileImageFieldset = profileImagePopup.querySelector('.popup__fieldset');\nvar profileImageForm = profileImagePopup.querySelector('.popup__form');\nprofileImageFieldset.setAttribute('style', 'margin-bottom: 30px');\nvar profileImagePopupSaveButton = profileImagePopup.querySelector('.popup__button');\n\n//change profile image form \nfunction changeImageSubmit(evt) {\n  evt.preventDefault();\n  buttonValidityForStatus(profileImagePopupSaveButton, true, selectorsForValidation);\n  setUserPicture({\n    avatar: profileImageInput.value\n  }).then(function () {\n    profileImage.src = profileImageInput.value;\n    modal_closePopup(profileImagePopup);\n    evt.target.reset();\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    buttonValidityForStatus(profileImagePopupSaveButton, false, selectorsForValidation, 'Сохранить');\n  });\n}\nprofileImageForm.addEventListener('submit', changeImageSubmit);\n;// CONCATENATED MODULE: ./src/components/utils.js\n\nvar cardsList = document.querySelector('.places');\nvar formElementImage = addCardPopup.querySelector('.popup__form');\nvar popupPlaceHolderForNameOfPlace = addCardPopup.querySelector('.popup__form-text_type_name');\nvar popupPlaceHolderForLink = addCardPopup.querySelector('.popup__form-text_type_description');\n\nfunction buttonValidityForStatus(button, booleanTrue, selectors, text) {\n  if (booleanTrue) {\n    button.disabled = 'disabled';\n    button.classList.add(selectors.buttonDisabledSelector);\n    button.classList.remove('buttons-hover');\n    button.textContent = 'Сохранение...';\n  } else {\n    button.disabled = false;\n    button.classList.remove(selectors.buttonDisabledSelector);\n    button.textContent = text;\n  }\n}\nfunction isLiked(likes, userID) {\n  return likes.some(function (user) {\n    return user._id === userID;\n  });\n}\nfunction checkLikeLocalView(likes, userID, likeButton, likesCounter) {\n  if (isLiked(likes, userID)) {\n    likeButton.classList.add('place__like-button_type_active');\n  } else {\n    likeButton.classList.remove('place__like-button_type_active');\n  }\n  likesCounter.textContent = likes.length;\n}\nfunction utils_closePopupOnOverlayClick(evt) {\n  if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close-button')) {\n    var currentPopup = document.querySelector('.popup_opened');\n    closePopup(currentPopup);\n  }\n}\n;// CONCATENATED MODULE: ./src/index.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || src_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction src_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return src_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return src_arrayLikeToArray(o, minLen); }\nfunction src_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n//get user id\nvar userID = null;\n\n//add default cards\nfunction renderDefaultCards() {\n  getAllInfo().then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      dataCards = _ref2[0],\n      userData = _ref2[1];\n    userID = userData._id;\n    dataCards.forEach(function (el) {\n      var newPlace = addPlace(el, userID);\n      cardsList.append(newPlace);\n    });\n  }).catch(function (err) {\n    console.log(err);\n  });\n}\nrenderDefaultCards();\n\n//second popup form\nvar addPlaceSubmit = function addPlaceSubmit(evt) {\n  evt.preventDefault();\n  buttonValidityForStatus(addCardPopupSaveButton, true, selectorsForValidation);\n  addCardApi({\n    name: popupPlaceHolderForNameOfPlace.value,\n    link: popupPlaceHolderForLink.value\n  }).then(function (newCardApi) {\n    var newPlace = addPlace(newCardApi, userID);\n    cardsList.prepend(newPlace);\n    modal_closePopup(addCardPopup);\n    evt.target.reset();\n  }).catch(function (error) {\n    console.log(error);\n  }).finally(function () {\n    buttonValidityForStatus(addCardPopupSaveButton, false, selectorsForValidation, 'Создать');\n  });\n};\nformElementImage.addEventListener('submit', addPlaceSubmit);\n\n//validation configuration\nvar selectorsForValidation = {\n  formSelector: '.popup__form',\n  buttonSubmitSelector: '.popup__button',\n  inputSelector: '.popup__form-text',\n  inputErrorSelector: 'popup__form-text_type_invalid',\n  buttonDisabledSelector: 'popup__button_type_disabled'\n};\nvalidation(selectorsForValidation);\n\n//event listener for open user edit info popup\nprofileEditButton.addEventListener('click', function () {\n  openPopupWithForm(profilePopup);\n});\n//--------------------------------------------------------------\n// к сожалению вынужден не согласиться с вами по поводу замечания с вставкой инпутов в данные пользователя,\n// так как это функция уже присутствует в коде и все корректно работает. на данный момент можно обновлять данные о\n// пользователе и все будет хорошо работать. вывод информации тоже работает корректно.\n// логика этой функции описана в файле modal.js на 93 строчке.\n// или я вас неправильно понял и в этом случае хотелось бы более подробно разъяснить что вы имели в виду\n//--------------------------------------------------------------\n\n//event listener for add card popup\naddButton.addEventListener('click', function () {\n  openPopupWithForm(addCardPopup);\n});\n\n//event listener for change profile image popup\nprofileImage.addEventListener('click', function () {\n  openPopupWithForm(profileImagePopup);\n});\n\n//adding opportunity to close popups by overflow click\n\nvar allPopups = document.querySelectorAll('.popup');\nallPopups.forEach(function (popup) {\n  popup.addEventListener('mousedown', closePopupOnOverlayClick);\n});\nsubmitDeletePopup.removeEventListener('mousedown', closePopupOnOverlayClick);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///444\n")}},__webpack_require__={d:(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F)},__webpack_exports__={};__webpack_modules__[444](0,__webpack_exports__,__webpack_require__)})();